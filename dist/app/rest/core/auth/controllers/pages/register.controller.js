var g=(c,s,r)=>new Promise((l,o)=>{var d=e=>{try{m(r.next(e))}catch(i){o(i)}},n=e=>{try{m(r.throw(e))}catch(i){o(i)}},m=e=>e.done?l(e.value):Promise.resolve(e.value).then(d,n);m((r=r.apply(c,s)).next())});import{ErrorRegisterValidation as v,RegisterValidation as w}from"../../validations/register.validation.js";const R=c=>g(void 0,null,function*(){const{req:s,controller:r}=c;s.$router;const l=r.client;let o={title:"Register | Agglomy !",meta:[{name:"child value",content:"child content value"}]};const d={index:"pages/register.html"};let n={user:r.authModel,confirm_password:"",error:v,clientError:"",registerUser(){return g(this,null,function*(){var e,i,h;try{if(w(this.user,this.confirm_password,this.error)==="ok"){ENV==="dev"&&console.log("All Fields are completed");let u={email:this.user.email,password:this.user.password},t=yield(e=l==null?void 0:l.auth)==null?void 0:e.auth().register(u).val();if(t!=null&&t.error){let a=(i=t==null?void 0:t.error)==null?void 0:i.auth;switch(a==null?void 0:a.code){case 602:this.clientError=(a==null?void 0:a.message)||"Sorry,this Email already exists!";break}}else(h=t==null?void 0:t.data)!=null&&h.data&&(this.clientError="",s.go())}}catch(f){ENV==="dev"&&console.log(f)}})}};yield r.render({data:n,meta:o,views:d})});export{R as default};
//# sourceMappingURL=register.controller.js.map
